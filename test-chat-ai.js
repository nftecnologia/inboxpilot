const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testChatAI() {
  console.log('ü§ñ Testando Agente de IA do Chat...\n');

  try {
    // 1. Verificar se h√° documentos na base de conhecimento
    console.log('üìö Verificando Base de Conhecimento...');
    const knowledgeCount = await prisma.knowledgeBase.count({
      where: { isActive: true }
    });
    
    console.log(`‚úÖ Total de documentos ativos: ${knowledgeCount}`);
    
    if (knowledgeCount === 0) {
      console.log('‚ö†Ô∏è  AVISO: Nenhum documento na base! A IA n√£o ter√° contexto.');
      console.log('üí° Adicione documentos em /base-conhecimento\n');
    }

    // 2. Listar categorias dispon√≠veis
    const categories = await prisma.knowledgeBase.findMany({
      where: { isActive: true },
      select: { category: true },
      distinct: ['category']
    });
    
    console.log('\nüìÇ Categorias dispon√≠veis:');
    categories.forEach(c => console.log(`   - ${c.category}`));

    // 3. Verificar configura√ß√µes do chat
    console.log('\n‚öôÔ∏è  Verificando configura√ß√µes...');
    
    // Simular busca de configura√ß√µes (normalmente vem da API)
    const defaultSettings = {
      ai: {
        model: 'gpt-4o',
        temperature: 0.3,
        confidenceThreshold: 80
      },
      knowledgeBase: {
        enabledCategories: categories.map(c => c.category),
        maxContexts: 5
      }
    };
    
    console.log(`   - Modelo: ${defaultSettings.ai.model}`);
    console.log(`   - Temperatura: ${defaultSettings.ai.temperature}`);
    console.log(`   - Threshold confian√ßa: ${defaultSettings.ai.confidenceThreshold}%`);
    console.log(`   - Max contextos: ${defaultSettings.knowledgeBase.maxContexts}`);

    // 4. Mostrar exemplos de perguntas
    console.log('\nüí¨ Exemplos de perguntas para testar:');
    const exemplos = [
      "Como fa√ßo para criar uma conta?",
      "Qual √© o hor√°rio de atendimento?",
      "Como resetar minha senha?",
      "Quais s√£o os planos dispon√≠veis?",
      "Como funciona o suporte t√©cnico?"
    ];
    
    exemplos.forEach(ex => console.log(`   - "${ex}"`));

    // 5. Verificar integra√ß√£o com Pinecone
    console.log('\nüîç Verificando integra√ß√£o com Pinecone...');
    
    if (!process.env.PINECONE_API_KEY) {
      console.log('‚ùå PINECONE_API_KEY n√£o configurada!');
      console.log('   Configure no arquivo .env');
    } else {
      console.log('‚úÖ Pinecone configurado');
    }

    if (!process.env.OPENAI_API_KEY) {
      console.log('‚ùå OPENAI_API_KEY n√£o configurada!');
      console.log('   Configure no arquivo .env');
    } else {
      console.log('‚úÖ OpenAI configurada');
    }

    // 6. Sugest√µes de melhorias
    console.log('\nüí° Sugest√µes para melhorar o agente:');
    console.log('   1. Adicione mais documentos na base de conhecimento');
    console.log('   2. Organize por categorias espec√≠ficas');
    console.log('   3. Inclua FAQs comuns da empresa');
    console.log('   4. Configure hor√°rio de atendimento em /configuracoes');
    console.log('   5. Ajuste o threshold de confian√ßa se necess√°rio');

    console.log('\n‚úÖ Teste conclu√≠do!');
    console.log('\nüöÄ Para testar o chat:');
    console.log('   1. Acesse o widget no canto inferior direito');
    console.log('   2. Preencha os dados obrigat√≥rios');
    console.log('   3. Fa√ßa uma pergunta');
    console.log('   4. O agente buscar√° na base e responder√°!\n');

  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testChatAI();
