// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // For credentials login
  emailVerified DateTime?
  image         String?
  role          String    @default("agent") // admin, manager, agent
  department    String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  emails        Email[]
  knowledgeBase KnowledgeBase[]
  assignedTickets Ticket[] @relation("AssignedTickets")
  createdTickets  Ticket[] @relation("CreatedTickets") 
  interactions    Interaction[]
  widgetConfigs   WidgetConfig[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Email {
  id          String   @id @default(cuid())
  from        String
  to          String
  subject     String
  content     String   @db.Text
  htmlContent String?  @db.Text
  status      String   @default("pending")
  priority    String   @default("normal")
  category    String?
  tags        String[]
  isRead      Boolean  @default(false)
  isStarred   Boolean  @default(false)
  sentiment   String?
  confidence  Float?
  aiResponse  String?  @db.Text
  aiAnalyzed  Boolean  @default(false)
  aiKeywords  String[]
  aiComplexity Int?
  receivedAt  DateTime @default(now())
  processedAt DateTime?
  respondedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  ticketId    String?
  user        User     @relation(fields: [userId], references: [id])
  ticket      Ticket?  @relation(fields: [ticketId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([category])
  @@index([receivedAt])
  @@index([aiAnalyzed])
  @@index([ticketId])
}

model KnowledgeBase {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  category    String
  tags        String[]
  keywords    String[]
  isActive    Boolean  @default(true)
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([category])
  @@index([isActive])
}

model EmailTemplate {
  id        String   @id @default(cuid())
  name      String
  subject   String
  content   String   @db.Text
  category  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailMetrics {
  id               String   @id @default(cuid())
  date             DateTime @unique
  emailsReceived   Int      @default(0)
  emailsProcessed  Int      @default(0)
  emailsResponded  Int      @default(0)
  averageResponse  Float?
  sentiment        Json?
  categories       Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([date])
}

// CRM Models
model Client {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  company     String?
  phone       String?
  location    String?
  avatar      String?
  notes       String?  @db.Text
  satisfaction Float?  // 1-5 rating
  totalTickets Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tickets     Ticket[]
  chatSessions ChatSession[]
  
  @@index([email])
  @@index([company])
  @@index([phone])
}

model Ticket {
  id          String       @id @default(cuid())
  number      Int          @unique @default(autoincrement())
  subject     String
  description String?      @db.Text
  status      TicketStatus @default(OPEN)
  priority    Priority     @default(MEDIUM)
  category    String?
  source      String       @default("email") // email, chat, phone, form
  clientId    String
  assigneeId  String?
  createdBy   String?
  slaDeadline DateTime?
  resolvedAt  DateTime?
  closedAt    DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  client      Client       @relation(fields: [clientId], references: [id])
  assignee    User?        @relation(name: "AssignedTickets", fields: [assigneeId], references: [id])
  creator     User?        @relation(name: "CreatedTickets", fields: [createdBy], references: [id])
  emails      Email[]
  interactions Interaction[]
  tags        TicketTag[]
  chatSessions ChatSession[]
  
  @@index([status])
  @@index([priority])
  @@index([clientId])
  @@index([assigneeId])
  @@index([createdAt])
}

model Interaction {
  id          String          @id @default(cuid())
  ticketId    String
  userId      String?
  type        InteractionType @default(NOTE)
  content     String          @db.Text
  isPublic    Boolean         @default(true)
  isInternal  Boolean         @default(false)
  duration    Int?            // em minutos
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  ticket      Ticket          @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user        User?           @relation(fields: [userId], references: [id])
  
  @@index([ticketId])
  @@index([userId])
  @@index([type])
}

model TicketTag {
  id       String @id @default(cuid())
  ticketId String
  name     String
  color    String @default("#3B82F6")
  
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  @@unique([ticketId, name])
}

// Enums
enum TicketStatus {
  OPEN
  IN_PROGRESS  
  WAITING_CLIENT
  RESOLVED
  CLOSED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InteractionType {
  EMAIL
  NOTE
  CALL
  MEETING
  SMS
  CHAT
}

// Chat Support Models
model ChatSession {
  id          String        @id @default(cuid())
  userId      String?       // null for anonymous users
  userEmail   String?       // email for anonymous users
  userName    String?       // name for anonymous users
  userPhone   String?       // phone for anonymous users
  clientId    String?       // link to Client record
  ticketId    String?       // link to Ticket record
  status      ChatStatus    @default(ACTIVE)
  source      String        @default("widget") // widget, page, mobile
  metadata    Json?         // additional context
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  closedAt    DateTime?
  
  messages    ChatMessage[]
  client      Client?       @relation(fields: [clientId], references: [id])
  ticket      Ticket?       @relation(fields: [ticketId], references: [id])
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([clientId])
  @@index([ticketId])
}

model ChatMessage {
  id          String        @id @default(cuid())
  sessionId   String
  role        MessageRole   // user, assistant, system
  content     String        @db.Text
  confidence  Float?        // AI confidence score (0-1)
  sources     Json?         // knowledge base sources used
  metadata    Json?         // additional data (e.g., suggested actions)
  isRead      Boolean       @default(false)
  createdAt   DateTime      @default(now())
  
  session     ChatSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@index([sessionId])
  @@index([role])
  @@index([createdAt])
}

// Chat Analytics
model ChatAnalytics {
  id                  String   @id @default(cuid())
  date                DateTime @unique
  totalSessions       Int      @default(0)
  totalMessages       Int      @default(0)
  avgConfidence       Float?
  avgSessionDuration  Float?   // in minutes
  resolvedByAI        Int      @default(0)
  escalatedToHuman    Int      @default(0)
  topQuestions        Json?    // frequently asked questions
  lowConfidenceTopics Json?    // topics needing improvement
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@index([date])
}

// Chat Enums
enum ChatStatus {
  ACTIVE
  IDLE
  CLOSED
  ESCALATED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// Widget Configuration
model WidgetConfig {
  id              String    @id @default(cuid())
  appId           String    @unique
  apiKey          String    @unique
  name            String    // Nome da empresa/projeto
  
  // Domínios autorizados
  allowedDomains  String[]  // ["example.com", "app.example.com"]
  
  // Personalização
  primaryColor    String    @default("#2A65F9")
  position        String    @default("bottom-right")
  title           String    @default("Suporte")
  subtitle        String    @default("Como podemos ajudar?")
  welcomeMessage  String?   @db.Text
  avatarUrl       String?   // URL do avatar do assistente
  
  // Configurações
  isActive        Boolean   @default(true)
  requireAuth     Boolean   @default(false)
  collectName     Boolean   @default(true)
  collectEmail    Boolean   @default(true)
  collectPhone    Boolean   @default(true)
  
  // Analytics
  totalSessions   Int       @default(0)
  totalMessages   Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String    // Quem criou
  
  user            User      @relation(fields: [userId], references: [id])
  
  @@index([appId])
  @@index([apiKey])
  @@index([userId])
}
