import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"
import { buscarConhecimentoRelevante, formatarConhecimentoParaIA } from "./knowledge-search"

// Fun√ß√£o para analisar o conte√∫do do e-mail e categorizar
export async function analisarEmail(assunto: string, corpo: string) {
  console.log("üîç analisarEmail chamada com:", { assunto, corpo })

  // Verificar se a API key est√° configurada
  if (!process.env.OPENAI_API_KEY) {
    console.error("‚ùå OPENAI_API_KEY n√£o configurada")
    throw new Error("OPENAI_API_KEY n√£o configurada")
  }

  const prompt = `
    Analise o seguinte e-mail e categorize-o em uma das seguintes categorias:
    - Cadastro e Conta
    - Checkout e Convers√£o
    - Produtos
    - Marketplace
    - √Årea de Membros
    - Integra√ß√µes
    - Afiliados
    - Geral
    - Consumidor
    - Pl√°gio
    - Upsell One Click
    - Biometria
    - Finan√ßas

    Assunto do e-mail: ${assunto}
    Corpo do e-mail: ${corpo}

    Retorne apenas o nome da categoria, sem explica√ß√µes adicionais.
  `

  try {
    console.log("üì§ Enviando para OpenAI...")
    const { text } = await generateText({
      model: openai("gpt-4o"),
      prompt,
      maxTokens: 50,
    })
    console.log("üì• Resposta do OpenAI:", text)

    return text.trim()
  } catch (error) {
    console.error("üí• Erro ao analisar e-mail:", error)
    console.error("Detalhes do erro:", error instanceof Error ? error.message : "Erro desconhecido")
    return "Geral" // Categoria padr√£o em caso de erro
  }
}

// Fun√ß√£o para gerar resposta do e-mail
export async function gerarRespostaEmail(
  assunto: string,
  corpo: string,
  nomeRemetente: string,
  categoria: string,
  palavrasChave: string[] = [],
) {
  console.log("üîç gerarRespostaEmail chamada")

  try {
    // Buscar conhecimento relevante na base de dados
    console.log("üîç Buscando conhecimento relevante...")
    const conhecimentosRelevantes = await buscarConhecimentoRelevante(categoria, palavrasChave, assunto, corpo)
    const contextoConhecimento = formatarConhecimentoParaIA(conhecimentosRelevantes)
    console.log("‚úÖ Conhecimento encontrado:", conhecimentosRelevantes.length, "itens")

    const prompt = `
      Voc√™ √© um assistente de suporte ao cliente profissional e prestativo.
      
      IMPORTANTE: Use as informa√ß√µes da base de conhecimento abaixo para responder quando dispon√≠vel.
      Se a base de conhecimento n√£o cont√©m informa√ß√µes suficientes, forne√ßa uma resposta √∫til baseada no contexto.
      
      BASE DE CONHECIMENTO DISPON√çVEL:
      ${contextoConhecimento}
      
      INFORMA√á√ïES DO E-MAIL:
      Categoria: ${categoria}
      Assunto: ${assunto}
      Corpo: ${corpo}
      Nome do remetente: ${nomeRemetente}
      Palavras-chave identificadas: ${palavrasChave.join(", ")}
      
      INSTRU√á√ïES:
      1. Use um tom ${obterTomPorCategoria(categoria)}
      2. Responda em portugu√™s do Brasil
      3. Seja claro, conciso e √∫til
      4. Use informa√ß√µes da base de conhecimento quando dispon√≠vel
      5. Inicie com "Ol√° ${nomeRemetente},"
      6. Termine com "Atenciosamente, Equipe de Suporte"
      7. Limite a resposta a no m√°ximo 250 palavras
      8. Forne√ßa uma resposta √∫til mesmo se n√£o houver conhecimento espec√≠fico
    `

    console.log("üì§ Gerando resposta com OpenAI...")
    const { text } = await generateText({
      model: openai("gpt-4o"),
      prompt,
      temperature: 0.3,
      maxTokens: 500,
    })
    console.log("‚úÖ Resposta gerada com sucesso")

    return text.trim()
  } catch (error) {
    console.error("üí• Erro ao gerar resposta:", error)
    return `Ol√° ${nomeRemetente},

Agradecemos seu contato. Recebemos sua mensagem e nossa equipe est√° analisando o caso. Em breve retornaremos com informa√ß√µes mais detalhadas.

Para urg√™ncias, entre em contato atrav√©s do nosso chat online.

Atenciosamente,
Equipe de Suporte`
  }
}

// Fun√ß√£o para extrair palavras-chave do e-mail
export async function extrairPalavrasChave(assunto: string, corpo: string) {
  console.log("üîç extrairPalavrasChave chamada")

  const prompt = `
    Extraia 5 palavras-chave relevantes do seguinte e-mail:
    
    Assunto: ${assunto}
    Corpo: ${corpo}
    
    Retorne apenas as palavras-chave separadas por v√≠rgula, sem explica√ß√µes adicionais.
  `

  try {
    console.log("üì§ Extraindo palavras-chave...")
    const { text } = await generateText({
      model: openai("gpt-4o"),
      prompt,
      maxTokens: 100,
    })
    console.log("‚úÖ Palavras-chave extra√≠das:", text)

    return text
      .trim()
      .split(",")
      .map((keyword) => keyword.trim())
  } catch (error) {
    console.error("üí• Erro ao extrair palavras-chave:", error)
    return []
  }
}

// Fun√ß√£o para avaliar a complexidade do e-mail
export async function avaliarComplexidade(assunto: string, corpo: string) {
  console.log("üîç avaliarComplexidade chamada")

  const prompt = `
    Avalie a complexidade do seguinte e-mail em uma escala de 1 a 5, onde:
    1 = Muito simples (pode ser respondido com template)
    2 = Simples (resposta direta)
    3 = Moderado (requer alguma an√°lise)
    4 = Complexo (requer an√°lise detalhada)
    5 = Muito complexo (requer interven√ß√£o humana especializada)
    
    Assunto: ${assunto}
    Corpo: ${corpo}
    
    Retorne apenas o n√∫mero da escala, sem explica√ß√µes adicionais.
  `

  try {
    console.log("üì§ Avaliando complexidade...")
    const { text } = await generateText({
      model: openai("gpt-4o"),
      prompt,
      maxTokens: 10,
    })
    console.log("‚úÖ Complexidade avaliada:", text)

    const complexidade = Number.parseInt(text.trim())
    return isNaN(complexidade) ? 3 : complexidade
  } catch (error) {
    console.error("üí• Erro ao avaliar complexidade:", error)
    return 3 // Complexidade moderada por padr√£o
  }
}

// Fun√ß√£o auxiliar para determinar o tom baseado na categoria
function obterTomPorCategoria(categoria: string): string {
  switch (categoria) {
    case "Cadastro e Conta":
    case "Checkout e Convers√£o":
    case "Integra√ß√µes":
      return "profissional e prestativo"
    case "Produtos":
    case "Marketplace":
    case "√Årea de Membros":
      return "entusi√°stico e informativo"
    case "Consumidor":
    case "Pl√°gio":
      return "formal e respeitoso"
    case "Finan√ßas":
      return "profissional e claro"
    default:
      return "amig√°vel e profissional"
  }
}
